!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t,s,r,i,n,o){e(this,"isLiked",(()=>this._likes.find((e=>e._id===this._userId)))),e(this,"deleteCard",(()=>{this._element.remove(),this._element=null})),this._data=t,this._title=t.title,this._link=t.link,this._likes=t.likes,this._id=t._id,this._userId=s,this._cardSelector=r,this._handleLike=n,this._handleDelete=o,this._handleCardClick=i}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".grid__card").cloneNode(!0)}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".card__image"),t=this._element.querySelector(".card__title");return e.style.backgroundImage="url(".concat(this._link,")"),t.textContent=this._title,this._element}_setEventListeners(){this._element.querySelector(".card__like").addEventListener("click",(()=>this._handleLike(this._id))),this._element.querySelector(".card__delete").addEventListener("click",(()=>this._handleDelete(this._id))),this._element.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick()}))}getLikes(e){this._likes=e,this._countLikes()}_countLikes(){const e=this._element.querySelector(".card__like");this._element.querySelector(".card__like-counter").textContent=this._likes.length,this.isLiked()&&e.classList.toggle("card__like_active")}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var r=class{constructor(e,t){s(this,"_showInputError",((e,t)=>{const s=this._element.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)})),s(this,"_hideInputError",(e=>{const t=this._element.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._inputErrorClass),t.textContent=""})),s(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),s(this,"_toggleButtonState",(()=>{this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)})),this._inputSelector=e.inputSelector,this._fieldsetSelector=e.fieldsetSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t,this._inputList=Array.from(t.querySelectorAll(this._inputSelector)),this._buttonElement=t.querySelector(this._submitButtonSelector)}resetValidationError(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setEventListeners(){this._element.addEventListener("submit",(function(e){e.preventDefault()})),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._element.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}};class i{constructor(e){var t,s;s=e=>{e.target===e.currentTarget&&this.close(e.target)},(t="_handleLayoverClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=e,this._handleEscClose=this._handleEscClose.bind(this),this._handleLayoverClose=this._handleLayoverClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popupElement.classList.add("popup_enabled"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleLayoverClose)}close(){this._popupElement.classList.remove("popup_enabled"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleLayoverClose)}setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("popup__close")&&this.close()}))}}class n extends i{constructor(e,t){super(e),this._handleFormSubmit=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._inputList=this._formElement.querySelectorAll(".form__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{const s=t.id,r=t.value;e[s]=r})),e}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._formElement.reset()}}document.querySelector(".profile__name"),document.querySelector(".profile__category");const o=document.querySelector(".profile__picture"),l=document.querySelector(".image"),a=(document.getElementById("title"),document.getElementById("link"),document.querySelector(".grid__cards"),document.querySelector(".profile__edit-button")),c=(document.querySelector(".edit__close"),document.querySelector(".edit")),d=(document.getElementById("editForm"),document.querySelector(".avatar")),u=document.querySelector("#edit"),h=document.querySelector("#add"),_=document.querySelector("#avatar"),m=document.querySelector("#delete"),p=document.getElementById("name"),E=document.getElementById("category"),f=document.getElementById("avatar"),y=document.querySelector(".profile__add-button"),g=(document.querySelector(".add__close"),document.querySelector(".add")),v=(document.getElementById("addForm"),document.querySelector(".form__button"),{formSelector:".form",inputSelector:".form__input",fieldsetSelector:".form__fieldset",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"}),b=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject("Something went wrong: ".concat(e.status)))),S=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getUserInfo(){return b("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}editProfile(e){return b("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.description})})}editProfilePic(e){return b("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.picture})})}getInitialCards(){return b("".concat(this._baseUrl,"/cards"),{headers:this._headers})}renderCard(e){return b("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})})}likeCard(e){return b("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers})}unlikeCard(e){return b("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers})}deleteCard(e){return b("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"b451294b-44d9-464a-8874-2d4137a4eb3c","Content-Type":"application/json"}});let L;const C=new class{constructor(e){let{fullName:t,category:s,profilePic:r}=e;this._fullName=document.querySelector(t),this._category=document.querySelector(s),this._profilePic=document.querySelector(r)}getUserInfo(){return{name:this._fullName.textContent,description:this._category.textContent,picture:this._profilePic.src}}setUserInfo(e,t){this._fullName.textContent=e,this._category.textContent=t}setUserImage(e){this._profilePic.src=e}}({fullName:".profile__name",category:".profile__category",profilePic:".profile__picture"});Promise.all([S.getUserInfo(),S.getInitialCards()]).then((e=>{let[t,s]=e;L=t.id,C.setUserInfo(t.name,t.about),C.setUserImage(t.avatar),k.renderItems(s)})).catch((e=>{console.log(e)}));const k=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){const t=this._renderer(e);this._container.prepend(t)}renderItems(e){e.forEach((e=>{this.addItem(e)}))}}({renderer:function(e){const s=new t(e,L,"#card",(()=>{w.open(e.title,e.link)}),(()=>{s.isLiked()?S.unlikeCard(e.getId()).then((t=>{e.getLikes(t.number)})):S.likeCard(e.getId()).then((t=>{e.getLikes(t.number)}))}),(()=>{P.open(),P.submitDelete((()=>{S.deleteCard(id).then((()=>{s.deleteCard(),P.close()})).catch((e=>{console.log(e)})).finally((()=>{P.close()}))}))}));return s.generateCard()}},".grid__cards"),I=new n(u,(e=>{S.editProfile(e.name,e.description).then((t=>{C.setUserInfo(t.name,e.description)})).catch((e=>{console.log(e)})).finally((()=>{I.close()}))}));I.setEventListeners();const q=new n(h,(e=>{S.renderCard(e.title,e.link).then((e=>{console.log("res => ",e);const t={name:e.name,link:e.link,likes:e.likes,_id:e._id};k.addItem(t)})).catch((e=>{console.log(e)})).finally((()=>{q.close()}))}));q.setEventListeners();const w=new class extends i{constructor(e){super(e),this._imageTitle=this._popupElement.querySelector(".image__title"),this._imagePreview=this._popupElement.querySelector(".image__file")}open(e,t){super.open(),this._imagePreview.src=t,this._imagePreview.alt=e,this._imageTitle.textContent=e}}(l);w.setEventListeners();const B=new n(_,(e=>{S.editProfilePic(e.picture).then((e=>{C.setUserImage(e.picture)})).catch((e=>{console.log(e)})).finally((()=>{B.close()}))}));B.setEventListeners();const P=new class extends i{constructor(e){super(e),this._formElement=this._popupElement.querySelector(".popup__form"),this._submitButton=this._popupElement.querySelector("#submitButton"),this._text=this._submitButton.textContent}submitDelete(e){this._handleSubmit=e}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}}(m);P.setEventListeners(),a.addEventListener("click",(function(){const e=C.getUserInfo();p.value=e.name,E.value=e.description,U.resetValidationError(),I.open()})),y.addEventListener("click",(()=>{x.resetValidationError(),q.open()})),o.addEventListener("click",(function(){const e=C.getUserInfo();f.value=e.picture,V.resetValidationError(),B.open()}));const U=new r(v,c),x=new r(v,g),V=new r(v,d);U.enableValidation(),x.enableValidation(),V.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,